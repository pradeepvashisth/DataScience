setwd(file.path("C:", "Users", "pvashisth", "Documents") Data_Post <- read.csv("NIPostcodes.csv", sep = ",", header = T)
Data_Post
setwd(file.path("C:", "users", "pvashisth", "Documents") Data_Post <- read.csv("NIPostcodes.csv", sep = ",", header = T)
?Data_Post
setwd(file.path("C:", "users", "pvashisth", "Documents") Data_Post <- read.csv("NIPostcodes.csv", sep = ",", header = T)
setwd(file.path("C:/users/pvashisth/Documents") Data_Post <- read.csv("NIPostcodes.csv", sep = ",", header = T)
setwd(file.path("C:/Users/pvashisth/Documents") Data_Post <- read.csv("NIPostcodes.csv", sep = ",", header = T)
Data_Post <- read.csv("c:/Users/pvashisth/Documents/NIPostcodes.csv", sep = ",", header = T) 
Data_Post
Data_Post
str(Data_Post)
head(Data_Post, n = 10)
str(Data_Post)
head(Data_Post, n = 10)
head(Data_Post)
complete_data <- complete.cases(Data_Post)
complete_data
sum(complete_data)
complete_data <- Data_Post[complete.cases(Data_Post),]
complete_data
complete_data
complete_data <- Data_Post[complete.cases(Data_Post),]
Data_Post[!complete.cases(Data_Post),]
Data_Post[!complete.cases(Data_Post),]
mean(!complete.cases(Data_Post))
head(Data_Post, n = 10)
attach(Data_Post)
mean(!complete.cases(Data_Post))
complete.data <- !complete.cases(Data_Post)
sum(complete.data)
Col_Names <- c("Organisation_Name", "Sub_building_Name", "Building_Name", "Number", "Primary_Thorfare", "Alt_Thorfare", "Secondary_Thorfare",      "Locality", "Townland", "Town", "Country", "Postcode", "X_Coordinates", "Y_Coordinates", "Primary_Key")
Col_Names(Data_Post) <- Col_Names
colnames(Data_Post) <- Col_Names
head(Data_Post, n = 10)
sum(complete_data)
Data_Post[!complete.cases(Data_Post),]
complete_data <- Data_Post[complete.cases(Data_Post),]
complete_data
sum(is.na(Data_Post))
#Read in data file and load onto Data_Post data frame Data_Post <- read.csv("c:/Users/pvashisth/Documents/NIPostcodes.csv", sep = ",", header = T) # Let's check the structure of the dataset str(Data_Post) # First 10 rows of the  head(Data_Post, n = 10)
Col_Names <- c("Organisation_Name", "Sub_building_Name", "Building_Name", "Number", "Primary_Thorfare", "Alt_Thorfare", "Secondary_Thorfare",      "Locality", "Townland", "Town", "Country", "Postcode", "X_Coordinates", "Y_Coordinates", "Primary_Key") # Add column names to data frame using colnames vector colnames(Data_Post) <- Col_Names # List rows with missing values, this will provide the missing values per columns I think - not sure Data_Post[!complete.cases(Data_Post),]
summary(Data_Post)
#Read in data file and load onto Data_Post data frame Data_Post <- read.csv("c:/Users/pvashisth/Documents/NIPostcodes.csv", sep = ",", header = T) # Let's check the structure of the dataset str(Data_Post) # Show First 10 rows of the data frame head(Data_Post, n = 10)
summary(Data_Post)
sapply(Data_Post, sum(is.na(Data_Post)))
sum(is.na(Data_Post))
length(Data_Post[Data_Post == ''])
summary(Data_Post)
mean(is.na(Data_Post))
mean(is.na(Data_Post))
#setting path #Read in data file and load onto Data_Post data frame Data_Post <- read.csv("c:/Users/pvashisth/Documents/NIPostcodes.csv", sep = ",", header = T) # Let's check the structure of the dataset str(Data_Post) # Show First 10 rows of the data frame head(Data_Post, n = 10) # 2 # Create column names for each attribute in the data frame names(Data_Post) <- c("Organisation_Name", "Sub_building_Name", "Building_Name", "Number", "Primary_Thorfare", "Alt_Thorfare", "Secondary_Thorfare",     "Locality", "Townland", "Town", "Country", "Postcode", "X_Coordinates", "Y_Coordinates", "Primary_Key")
summary(Data_Post)
head(Data_Post)
complete.data <- !complete.cases(Data_Post)
sum(complete.data)
complete.data <- complete.cases(Data_Post)
sum(complete.data)
mean(complete.data)
mean(is.na(Data_Post))
sum(is.na(Data_Post))
length(Data_Post[my_data == ''])
Data_Post[Data_Post == ''] <- NA
sum(is.na(Data_Post))
Total_missing values <- sum(is.na(Data_Post))
Total_missing values <- sum(is.na(Data_Post))
Total_missing_values <- sum(is.na(Data_Post))
Total_missing_values
mean(Total_missing_values)
mean(is.na(Data_Post))
meant(!complete.cases(Data_Post) meant(!complete.cases(Data_Post))
mean(!complete.cases(Data_Post))
head(Data_Post, 100)
nrow(Data_Post)
sum(is.na(Data_Post))
mean(!complete.cases(Data_Post))
nrow(Data_Post)
mean(!complete.cases(Data_Post))
Data_Post[Data_Post == ''] <- NA
data_missing <- Data_Post[!complete.cases(Data_Post),]
nrow(data_missing)
sum(is.na(data_missing)sapply(missing_data, function(value) sum(is.na(value)))
sapply(data_missing, function(value) sum(is.na(value)))
head(Data_Post, 10)
head(Data_Post, n = 10)
summary(Data_Post)
str(Data_Post)
sapply(data_missing, function(value) sum(is.na(value)))
sum(is.na(data_missing) sapply(data_missing, function(value) sum(is.na(value)))
sapply(data_missing, function(value) sum(is.na(value)))
sum(is.na(data_missing) sum(is.na(data_missing))
sum(is.na(data_missing))
sapply(data_missing, function(value) sum(is.na(value)))
new_data <- subset(Data_Post, (c(15,1,2,3,4,5,6,7,8,9,10,11,12,13,14)) new_data <- subset(Data_Post, (c(15,1,2,3,4,5,6,7,8,9,10,11,12,13,14)))
new_data <- subset(Data_Post, c(15,1,2,3,4,5,6,7,8,9,10,11,12,13,14))
summary(Data_Post)
attach(Data_Post) Data_Country <- Data_Post[order(decreasing = FALSE, Country),] # confirm the change in the dataset head(Data_Country, n=10)
attach(Data_Post)
# Setting the country path #Read in data file and load onto Data_Post data frame Data_Post <- read.csv("c:/Users/pvashisth/Documents/NIPostcodes.csv", sep = ",", header = T) # Let's check the structure of the dataset str(Data_Post) # Show First 10 rows of the data frame head(Data_Post, n = 10) # 2. Add a suitable title to each attribute of the data # Create column names for each attribute in the data frame names(Data_Post) <- c("Organisation_Name", "Sub_building_Name", "Building_Name", "Number", "Primary_Thorfare", "Alt_Thorfare", "Secondary_Thorfare",     "Locality", "Townland", "Town", "County", "Postcode", "X_Coordinates", "Y_Coordinates", "Primary_Key") # 3. Show the total number and mean missing values of the NIPostcode data.  # data summary summary(Data_Post) # Total number of records nrow(Data_Post) # Missing values mean of rows mean(!complete.cases(Data_Post)) # 4.Remove or replace missing entries with a suitable identifier. Decide whether it is best to remove missing data or to recode it.  # convert missing values (Blank) to NA Data_Post[Data_Post == ''] <- NA # Missing value sum data_missing <- Data_Post[!complete.cases(Data_Post),] nrow(data_missing) sum(is.na(data_missing)) sapply(data_missing, function(value) sum(is.na(value)))
Data_County <- Data_Post[order(decreasing = FALSE, County),]
attach(Data_Post)
Data_County <- Data_Post[order(decreasing = FALSE, County),]
head(Data_County, n = 10)
str(Data_County)
Limavady_data = subset(Data_Post, grep1('Limavady', Locallity) & grep1('Limavady', Townland) & grep1 ('Limavady', Town))
grepl('Limavady', Town))
grepl('Limavady', Town))
grepl('LIMAVADY', Town))
Limavady_data = subset(Data_Post, grepl('LIMAVADY', Locallity) & grepl('LIMAVADY', Townland) & grepl('LIMAVADY', Town))
sapply(Data_Country, mode)
Data_Country <- rapply(Data_Post, as.character, classes = "factor", how = "replace")
str(Data_Country)
sapply(Data_Country, mode)
attach(Data_Post)
Limavady_data <- Data_Post[which(Locality == "LIMAVADY" | Townland == "LIMAVADY" | Town == "LIMAVADY"),]
head(Limavady_data, 10)
head(Limavady_data)
attach(Data_Post)
Limavady_data <- Data_Post[which(Locality == "LIMAVADY" | Townland == "LIMAVADY" | Town == "LIMAVADY"),]
head(Limavady_data, n=10)
Limavady_data <- Data_Post[which(Locality == "LIMAVADY" & Townland == "LIMAVADY" & Town == "LIMAVADY"),]
head(Limavady_data)
Limavady_data <- Data_Post[which(Locality == "LIMAVADY" & Townland == "LIMAVADY" | Town == "LIMAVADY"),]
head(Limavady_data)
new_data <- subset(Data_Post,select = c(15,1,2,3,4,5,6,7,8,9,10,11,12,13,14))
head(new_data)
attach(new_data)
Limavady_data <- new_data[which(Locality == "LIMAVADY" & Townland == "LIMAVADY" | Town == "LIMAVADY"),]
head(Limavady_data)
attach(new_data)
Limavady_data <- new_data[which(Locality == "LIMAVADY" & Townland == "LIMAVADY" | Town == "LIMAVADY"),]
head(Limavady_data)
Limavady_data <- new_data[which(Locality == "LIMAVADY" & Townland == "LIMAVADY" & Town == "LIMAVADY"),]
head(Limavady_data)
Limavady_data <- new_data[which(Locality == "LIMAVADY" && Townland == "LIMAVADY" | Town == "LIMAVADY"),]
head(Limavady_data)
Limavady_data <- new_data[which(Locality == "LIMAVADY" ANDTownland == "LIMAVADY" OR Town == "LIMAVADY"),]
Limavady_data <- new_data[which(Locality == "LIMAVADY" | Townland == "LIMAVADY" | Town == "LIMAVADY"),]
head(Limavady_data)
Limavady_data <- new_data[which(Locality == "LIMAVADY" | Town == "LIMAVADY" | Townland == "LIMAVADY"),]
head(Limavady_data)
Limavady_data <- new_data[which(Locality == "LIMAVADY" & Town == "LIMAVADY" | Townland == "LIMAVADY"),]
head(Limavady_data)
Limavady_data
Limavady_data
write.csv(Limavady_data, file = "Limavady.csv", quote = FALSE, na = "", row.names = FALSE)
Limavady_data <- new_data[which(Locality == "LIMAVADY" & Town == "LIMAVADY" & Townland == "LIMAVADY"),]
Limavady_data
Limavady_data <- new_data[which(Locality == "LIMAVADY" & Town == "LIMAVADY" && Townland == "LIMAVADY"),]
Limavady_data
write.csv(new_data, file = "CleanNIPostcodeData.csv", quote = FALSE, na = "", row.names = FALSE)
Limavady
Limavady_data = subset(new_data, grepl('LIMAVADY', Locality) & grepl('LIMAVADY', Townland) & grepl('LIMAVADY', Town))
Limavady_data
sum(Limavady_data)
summary(Limavady_data)
Data_Post <- kable(Data_Post)
install.packages("knitr")
library(knitr)
Data_Post <- kable(Data_Post)
head(Data_Post, 10)
head(Data_Post, n=10)
head(Data_Post, n=10)
# Setting the country path #Read in data file and load onto Data_Post data frame Data_Post <- read.csv("c:/Users/pvashisth/Documents/NIPostcodes.csv", sep = ",", header = T) # 1. Show the structure and first 10 rows of the dataframe containing all of the NIPostcode data.  str(Data_Post) # Show First 10 rows of the data frame head(Data_Post, n = 10)
summary(Data_Post)
names(Data_Post) <- c("Organisation_Name", "Sub_building_Name", "Building_Name", "Number", "Primary_Thorfare", "Alt_Thorfare", "Secondary_Thorfare",     "Locality", "Townland", "Town", "County", "Postcode", "X_Coordinates", "Y_Coordinates", "Primary_Key")
head(Data_Post)
str(Data_Post)
# data summary summary(Data_Post)
head(Data_Post, no=10)
str(Data_Post)
# Total number of records nrow(Data_Post) # Missing values mean of rows mean(!complete.cases(Data_Post))
mean(!complete.cases(Data_Post))
mean(complete.cases(Data_Post))
# Total number of records nrow(Data_Post) # mean missing values of rows mean(!complete.cases(Data_Post))
Data_Post[Data_Post == ''] <- NA
mean(!complete.cases(Data_Post))
# 2. Add a suitable title to each attribute of the data # data before adding the columns name summary(Data_Post) # Create column names for each attribute in the data frame names(Data_Post) <- c("Organisation_Name", "Sub_building_Name", "Building_Name", "Number", "Primary_Thorfare", "Alt_Thorfare", "Secondary_Thorfare",     "Locality", "Townland", "Town", "County", "Postcode", "X_Coordinates", "Y_Coordinates", "Primary_Key") # confirm the change on data frame head(Data_Post)
str(Data_Post)
# data before adding the columns name summary(Data_Post) # Create column names for each attribute in the data frame names(Data_Post) <- c("Organisation_Name", "Sub_building_Name", "Building_Name", "Number", "Primary_Thorfare", "Alt_Thorfare", "Secondary_Thorfare",     "Locality", "Townland", "Town", "County", "Postcode", "X_Coordinates", "Y_Coordinates", "Primary_Key") # confirm the change on data frame head(Data_Post) # 3. Show the total number and mean missing values of the NIPostcode data.  # data summary and str of the data frame summary(Data_Post) str(Data_Post)
# 2. Add a suitable title to each attribute of the data # data before adding the columns name summary(Data_Post) # Create column names for each attribute in the data frame names(Data_Post) <- c("Organisation_Name", "Sub_building_Name", "Building_Name", "Number", "Primary_Thorfare", "Alt_Thorfare", "Secondary_Thorfare",     "Locality", "Townland", "Town", "County", "Postcode", "X_Coordinates", "Y_Coordinates", "Primary_Key") # confirm the change on data frame head(Data_Post)
# data summary and str of the data frame summary(Data_Post) str(Data_Post) # Total number of records nrow(Data_Post) # convert missing values (Blank) to NA Data_Post[Data_Post == ''] <- NA # mean missing values of rows mean(!complete.cases(Data_Post)) # tr of the data frame after changes applied str(Data_Post)
summary(Data_Post)
str(Data_Post)
str(Data_Post)
nrow(Data_Post)
Data_Post[Data_Post == ''] <- NA
mean(!complete.cases(Data_Post))
# Total number of records nrow(Data_Post) # convert missing values (Blank) to NA Data_Post[Data_Post == ''] <- NA # mean missing values of rows mean(!complete.cases(Data_Post))
str(Data_Post)
summary(Data_Post)
str(Data_Post)
data_missing <- Data_Post[!complete.cases(Data_Post),] nrow(data_missing) sum(is.na(data_missing)) sapply(data_missing, function(value) sum(is.na(value)))
# Missing value sum data_missing <- Data_Post[!complete.cases(Data_Post),] nrow(data_missing) sum(is.na(data_missing)) sapply(data_missing, function(value) sum(is.na(value)))
str(Data_Post)
summary(Data_Post) str(Data_Post)
# using attach function in order to avoid repeating adding the data frame and $ attach(Data_Post) Data_County <- Data_Post[order(decreasing = FALSE, County),]
head(Data_County, n = 10)
str(Data_County)
Data_Post <- kable(Data_Post)
head(Data_Post, n=10)
str(Data_County)
summary(Data_Post) str(Data_Post)
summary(Data_Post)
summary(Data_Post)
summary(Data_Post)
str(Data_Post)
head(Data_Post, n = 10)
str(Data_County)
str(Data_Post) Data_Post <- kable(Data_Post)
head(Data_Post, n = 10)
str(Data_County)
summary(Data_Post)
str(Data_Post)
str(Data_Post)
summary(Data_Post)
summary(Data_Post) str(Data_Post) Data_Post <- kable(Data_Post)
head(Data_Post, n = 10)
str(Data_County)
summary(Data_Post)
new_data <- subset(Data_Post, select = c(15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
head(new_data)
# Setting the country path #Read in data file and load onto Data_Post data frame Data_Post <- read.csv("c:/Users/pvashisth/Documents/NIPostcodes.csv", sep = ",", header = T) # 1. Show the structure and first 10 rows of the dataframe containing all of the NIPostcode data.  str(Data_Post) # Show First 10 rows of the data frame head(Data_Post, n = 10) # 2. Add a suitable title to each attribute of the data # data before adding the columns name summary(Data_Post) # Create column names for each attribute in the data frame names(Data_Post) <- c("Organisation_Name", "Sub_building_Name", "Building_Name", "Number", "Primary_Thorfare", "Alt_Thorfare", "Secondary_Thorfare",     "Locality", "Townland", "Town", "County", "Postcode", "X_Coordinates", "Y_Coordinates", "Primary_Key") # confirm the change on data frame head(Data_Post) # 3. Show the total number and mean missing values of the NIPostcode data.  # data summary and str of the data frame summary(Data_Post) str(Data_Post) # Total number of records nrow(Data_Post) # convert missing values (Blank) to NA Data_Post[Data_Post == ''] <- NA # mean missing values of rows mean(!complete.cases(Data_Post)) # str of the data frame after changes applied str(Data_Post) # 4.Remove or replace missing entries with a suitable identifier. Decide whether it is best to remove missing data or to recode it.  # summary & str of the data frame before changes summary(Data_Post) str(Data_Post) # Missing value sum data_missing <- Data_Post[!complete.cases(Data_Post),] nrow(data_missing) sum(is.na(data_missing)) sapply(data_missing, function(value) sum(is.na(value))) # str of the data frame after changes applied str(Data_Post) # 5. Modify the County attribute to a categorising factor # summary & str of the data frame before changes summary(Data_Post) str(Data_Post) # using attach function in order to avoid repeating adding the data frame and $ attach(Data_Post) Data_County <- Data_Post[order(decreasing = FALSE, County),] # confirm the change in the dataset head(Data_County, n = 10) # varify how it effect in the strucutre of the data frame str(Data_County)
sapply(Data_Country, mode) Data_Country <- rapply(Data_Post, as.character, classes = "factor", how = "replace") str(Data_Country)
summary(Data_Post) str(Data_Post) # using sapply function  sapply(Data_Country, mode) Data_Country <- rapply(Data_Post, as.character, classes = "factor", how = "replace") str(Data_Country)
summary(Data_Post)
# Setting the country path #Read in data file and load onto Data_Post data frame Data_Post <- read.csv("c:/Users/pvashisth/Documents/NIPostcodes.csv", sep = ",", header = T) # 1. Show the structure and first 10 rows of the dataframe containing all of the NIPostcode data.  str(Data_Post) # Show First 10 rows of the data frame head(Data_Post, n = 10) # 2. Add a suitable title to each attribute of the data # data before adding the columns name summary(Data_Post) # Create column names for each attribute in the data frame names(Data_Post) <- c("Organisation_Name", "Sub_building_Name", "Building_Name", "Number", "Primary_Thorfare", "Alt_Thorfare", "Secondary_Thorfare",     "Locality", "Townland", "Town", "County", "Postcode", "X_Coordinates", "Y_Coordinates", "Primary_Key") # confirm the change on data frame head(Data_Post) # 3. Show the total number and mean missing values of the NIPostcode data.  # data summary and str of the data frame summary(Data_Post) str(Data_Post) # Total number of records nrow(Data_Post) # convert missing values (Blank) to NA Data_Post[Data_Post == ''] <- NA # mean missing values of rows mean(!complete.cases(Data_Post)) # str of the data frame after changes applied str(Data_Post) # 4.Remove or replace missing entries with a suitable identifier. Decide whether it is best to remove missing data or to recode it.  # summary & str of the data frame before changes summary(Data_Post) str(Data_Post) # Missing value sum data_missing <- Data_Post[!complete.cases(Data_Post),] nrow(data_missing) sum(is.na(data_missing)) sapply(data_missing, function(value) sum(is.na(value))) # str of the data frame after changes applied str(Data_Post) # 5. Modify the County attribute to a categorising factor # summary & str of the data frame before changes summary(Data_Post) str(Data_Post) # using attach function in order to avoid repeating adding the data frame and $ attach(Data_Post) Data_County <- Data_Post[order(decreasing = FALSE, County),] # confirm the change in the dataset head(Data_County, n = 10) # varify how it effect in the strucutre of the data frame str(Data_County)
Data_Post <- kable(Data_Post)
head(Data_Post, n = 10)
summary(Data_Post) str(Data_Post)
str(Data_Post)
summary(Data_Post)
str(Data_Post)
str(Data_County)
str(Data_Post)
summary(Data_Post)
new_data <- subset(Data_Post, select = c(15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
head(new_data)
new_data <- subset(Data_Post, select = c(15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
# Setting the country path #Read in data file and load onto Data_Post data frame Data_Post <- read.csv("c:/Users/pvashisth/Documents/NIPostcodes.csv", sep = ",", header = T) # 1. Show the structure and first 10 rows of the dataframe containing all of the NIPostcode data.  str(Data_Post) # Show First 10 rows of the data frame head(Data_Post, n = 10) # 2. Add a suitable title to each attribute of the data # data before adding the columns name summary(Data_Post) # Create column names for each attribute in the data frame names(Data_Post) <- c("Organisation_Name", "Sub_building_Name", "Building_Name", "Number", "Primary_Thorfare", "Alt_Thorfare", "Secondary_Thorfare",     "Locality", "Townland", "Town", "County", "Postcode", "X_Coordinates", "Y_Coordinates", "Primary_Key") # confirm the change on data frame head(Data_Post) # 3. Show the total number and mean missing values of the NIPostcode data.  # data summary and str of the data frame summary(Data_Post) str(Data_Post) # Total number of records nrow(Data_Post) # convert missing values (Blank) to NA Data_Post[Data_Post == ''] <- NA # mean missing values of rows mean(!complete.cases(Data_Post)) # str of the data frame after changes applied str(Data_Post) # 4.Remove or replace missing entries with a suitable identifier. Decide whether it is best to remove missing data or to recode it.  # summary & str of the data frame before changes summary(Data_Post) str(Data_Post) # Missing value sum data_missing <- Data_Post[!complete.cases(Data_Post),] nrow(data_missing) sum(is.na(data_missing)) sapply(data_missing, function(value) sum(is.na(value))) # str of the data frame after changes applied str(Data_Post) # 5. Modify the County attribute to a categorising factor # summary & str of the data frame before changes summary(Data_Post) str(Data_Post) # using attach function in order to avoid repeating adding the data frame and $ attach(Data_Post) Data_County <- Data_Post[order(decreasing = FALSE, County),] # confirm the change in the dataset head(Data_County, n = 10) # varify how it effect in the strucutre of the data frame str(Data_County)
summary(Data_Post)
str(Data_Post)
sapply(Data_Country, mode) Data_Country <- rapply(Data_Post, as.character, classes = "factor", how = "replace") str(Data_Country)
str(Data_Post)
sapply(Data_Country, mode) Data_Country <- rapply(Data_Post, as.character, classes = "factor", how = "replace") str(Data_Country)
str(Data_Country)
Summary(Data_Country)
sapply(Data_County, mode) Data_County <- rapply(Data_Post, as.character, classes = "factor", how = "replace")
str(Data_County)
Summary(Data_Country)
Summary(Data_County)
Data_County <- rapply(Data_Post, as.character, classes = "factor", how = "replace")
str(Data_County)
summary(Data_Post) str(Data_Post) # align all attribute data through sapply function sapply(Data_County, mode) Data_County <- rapply(Data_Post, as.character, classes = "factor", how = "replace")
str(Data_County)
summary(Data_Post)
str(Data_Post)
str(Data_County)
sapply(format_data, mode)
format_data <- rapply(Data_Post, as.character, classes = "factor", how = "replace")
sapply(format_data, mode)
format_data <- rapply(Data_Post, as.character, classes = "factor", how = "replace") sapply(format_data, mode)
str(format_data)
summary(format_data)
str(format_data)
new_data <- subset(format_data, select = c(15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
head(new_data)
str(Data_Post)
str(format_data)
str(new_data)
str(new_data)
summary(new_data) str(new_data)
summary(new_data)
Data_check <- read.csv("c:/Users/pvashisth/Documents/Limavady.csv", sep = ",", header = T)
summary(new_data) str(new_data) attach(new_data) Limavady_data = subset(new_data, grepl('LIMAVADY', Locality) & grepl('LIMAVADY', Townland) & grepl('LIMAVADY', Town)) summary(Limavady_data) write.csv(Limavady_data, file = "Limavady.csv", quote = FALSE, na = "", row.names = FALSE)
str(new_data)
write.csv(new_data, file = "CleanNIPostcodeData.csv", quote = FALSE, na = "", row.names = FALSE)
str(CleanNIPostcodeData)
summary(new_data) str(new_data) attach(new_data) Limavady_data = subset(new_data, grepl('LIMAVADY', Locality) & grepl('LIMAVADY', Townland) & grepl('LIMAVADY', Town)) summary(Limavady_data) write.csv(Limavady_data, file = "Limavady.csv", quote = FALSE, na = "", row.names = FALSE) # str of the data frame after changes applied str(Limavady_data)
head(Limavady_data)
sum(Limavady_data)
Limavady_data
summary(new_data) str(new_data)
write.csv(new_data, file = "CleanNIPostcodeData.csv", quote = FALSE, na = "", row.names = FALSE)
str(new_data)
summary(new_data)
# Setting the country path #Read in data file and load onto Data_Post data frame Data_Post <- read.csv("c:/Users/pvashisth/Documents/NIPostcodes.csv", sep = ",", header = T) # 1. Show the structure and first 10 rows of the dataframe containing all of the NIPostcode data.  str(Data_Post) # Show First 10 rows of the data frame head(Data_Post, n = 10) # 2. Add a suitable title to each attribute of the data # data before adding the columns name summary(Data_Post) # Create column names for each attribute in the data frame names(Data_Post) <- c("Organisation_Name", "Sub_building_Name", "Building_Name", "Number", "Primary_Thorfare", "Alt_Thorfare", "Secondary_Thorfare",     "Locality", "Townland", "Town", "County", "Postcode", "X_Coordinates", "Y_Coordinates", "Primary_Key") # confirm the change on data frame head(Data_Post) # 3. Show the total number and mean missing values of the NIPostcode data.  # data summary and str of the data frame summary(Data_Post) str(Data_Post) # Total number of records nrow(Data_Post) # convert missing values (Blank) to NA Data_Post[Data_Post == ''] <- NA # mean missing values of rows mean(!complete.cases(Data_Post)) # str of the data frame after changes applied str(Data_Post) # 4.Remove or replace missing entries with a suitable identifier. Decide whether it is best to remove missing data or to recode it.  # summary & str of the data frame before changes summary(Data_Post) str(Data_Post) # Missing value sum data_missing <- Data_Post[!complete.cases(Data_Post),] nrow(data_missing) sum(is.na(data_missing)) sapply(data_missing, function(value) sum(is.na(value))) # str of the data frame after changes applied str(Data_Post) # 5. Modify the County attribute to a categorising factor # summary & str of the data frame before changes summary(Data_Post) str(Data_Post) # using attach function in order to avoid repeating adding the data frame and $ attach(Data_Post) Data_County <- Data_Post[order(decreasing = FALSE, County),]
Data_County <- Data_Post[order(decreasing = FALSE, County),]
# Setting the country path #Read in data file and load onto Data_Post data frame Data_Post <- read.csv("c:/Users/pvashisth/Documents/NIPostcodes.csv", sep = ",", header = T) # 1. Show the structure and first 10 rows of the dataframe containing all of the NIPostcode data.  str(Data_Post) # Show First 10 rows of the data frame head(Data_Post, n = 10)
#Read in data file and load onto Data_Post data frame Data_Post <- read.csv("c:/Users/pvashisth/Documents/NIPostcodes.csv", sep = ",", header = T) # 1. Show the structure and first 10 rows of the dataframe containing all of the NIPostcode data.  str(Data_Post) # Show First 10 rows of the data frame head(Data_Post, n = 10) # 2. Add a suitable title to each attribute of the data # data before adding the columns name summary(Data_Post) # Create column names for each attribute in the data frame names(Data_Post) <- c("Organisation_Name", "Sub_building_Name", "Building_Name", "Number", "Primary_Thorfare", "Alt_Thorfare", "Secondary_Thorfare",     "Locality", "Townland", "Town", "County", "Postcode", "X_Coordinates", "Y_Coordinates", "Primary_Key")
nrow(Data_Post)
Data_Post[Data_Post == ''] <- NA
mean(!complete.cases(Data_Post))
str(Data_Post)
data_missing <- Data_Post[!complete.cases(Data_Post),]
nrow(data_missing)
sum(is.na(data_missing))
sapply(data_missing, function(value) sum(is.na(value)))
Data_County <- Data_Post[order(decreasing = FALSE, County),]
attach(Data_Post)
Data_County <- Data_Post[order(decreasing = FALSE, County),]
attach(Data_Post)
Data_Post <- Data_Post[order(decreasing = FALSE, County),]
head(Data_Post, n = 10)
str(Data_Post)
Data_Post <- read.csv("c:/Users/pvashisth/Documents/NIPostcodes.csv", sep = ",", header = T)
head(Data_Post, n = 10)
summary(Data_Post)
names(Data_Post) <- c("Organisation_Name", "Sub_building_Name", "Building_Name", "Number", "Primary_Thorfare", "Alt_Thorfare", "Secondary_Thorfare",     "Locality", "Townland", "Town", "County", "Postcode", "X_Coordinates", "Y_Coordinates", "Primary_Key")
# Total number of records nrow(Data_Post) # convert missing values (Blank) to NA Data_Post[Data_Post == ''] <- NA # mean missing values of rows mean(!complete.cases(Data_Post))
str(Data_Post)
head(Data_Post, n = 10)
Data_Post1 <- Data_Post[order(decreasing = FALSE, County),]
head(Data_Post1, n = 10)
str(Data_Post)
attach(Data_Post)
Data_Post <- Data_Post[order(decreasing = FALSE, County),]
head(Data_Post, n = 10)
str(Data_Post)
install.packages("knitr")
library(knitr)
test_data <- kable(Data_Post)
head(test_data, 5)
test_data <- kable(head(Data_Post[1:5]), align = c(rep('c', 5)))
head(test_data, 5)
test_data1 <- kable(head(Data_Post[1:5]), align = c(rep('c', 5)))
head(test_data1, 5)
str(Data_Post)
test_data2 <- kable(head(Data_Post[1:5]), align = c(rep('c', 5)))
head(test_data2, 5)
test_data2 <- kable(head(Data_Post[1:15]), align = c(rep('c', 5)))
head(test_data2, 5)
test_data2 <- kable(head(Data_Post[1:15]), align = c(rep('c', 15)))
head(test_data2, 5)
test_data2 <- kable(head(Data_Post[1:15]), align = c(rep('c', 15)), row.names = NA, col.names = NA)
head(test_data2, 5)
test_data2 <- kable(head(Data_Post[1:15]), align = row.names = NA, col.names = NA)
test_data2 <- kable(head(Data_Post[1:15]), align = row.names = NA, col.names = NA))
test_data2 <- kable(head(Data_Post[1:15]), align, row.names = NA, col.names = NA))
test_data2 <- kable(head(Data_Post[1:15]), align( row.names = NA, col.names = NA))
test_data2 <- kable(head(Data_Post[1:15]), align(row.names = NA, col.names = NA))
test_data2 <- kable(head(Data_Post[1:15]), align = c(rep('c', times = 15)),row.names = NA, col.names = NA))
test_data2 <- kable(head(Data_Post[1:15]), align = c(rep('c', times = 15)),row.names = NA, col.names = NA))
test_data2 <- kable(head(Data_Post[1:15]), align = c(rep('c', times = 15)),row.names = NA, col.names = NA))
test_data2 <- kable(head(Data_Post[1:15]), align = c(rep('c', 15)))
head(test_data2, 5)
colnames(Data_Post)
test_data2 <- kable(head(Data_Post[1:15]), align = c(rep('c', 15)) col.names = c("Organisation_Name", "Sub_building_Name", "Sigma Lower", "Building_Name", "Number", "Primary_Thorfare", "Alt_Thorfare", "Secondary_Thorfare", "Locality", "Townland", "Town", "County", "Postcode", "X_Coordinates","Y_Coordinates","Primary_Key"))
test_data2 <- kable(head(Data_Post[1:15]), align = c(rep('c', 15)) col.names = c("Organisation_Name", "Sub_building_Name","Building_Name", "Number", "Primary_Thorfare", "Alt_Thorfare", "Secondary_Thorfare", "Locality", "Townland", "Town", "County", "Postcode", "X_Coordinates","Y_Coordinates","Primary_Key"))
test_data2 <- kable(head(Data_Post[1:15]), align = c(rep('c', 15)),col.names= c("Organisation_Name", "Sub_building_Name","Building_Name", "Number", "Primary_Thorfare", "Alt_Thorfare", "Secondary_Thorfare", "Locality", "Townland", "Town", "County", "Postcode", "X_Coordinates","Y_Coordinates","Primary_Key"))
head(test_data2, 5)
test_data2 <- kable(head(Data_Post[1:15]), align = c(rep('c', times=15)),col.names= c("Organisation_Name", "Sub_building_Name","Building_Name", "Number", "Primary_Thorfare", "Alt_Thorfare", "Secondary_Thorfare", "Locality", "Townland", "Town", "County", "Postcode", "X_Coordinates","Y_Coordinates","Primary_Key"))
head(test_data2, 5)
str(test_data2)
str(Data_Post)
Data_Post <- rapply(Data_Post, as.character, classes = "factor", how = "replace")
sapply(Data_Post, mode)
str(Data_Post)
Data_Post <- subset(format_data, select = c(15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
str(Data_Post)
Data_Post <- subset(format_data, select = c(15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
head(Data_Post)
Data_Post <- subset(Data_Post, select = c(15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
str(Data_Post)
Limavady_data = subset(Data_Post, grepl('LIMAVADY', Locality) & grepl('LIMAVADY', Townland) & grepl('LIMAVADY', Town))
summary(Limavady_data)
write.csv(Limavady_data, file = "Limavady.csv", quote = FALSE, na = "", row.names = FALSE)
Data_Post <- read.csv("c:/Users/pvashisth/Documents/Limavady.csv", sep = ",", header = T)
Data_Post <- read.csv("c:/Users/pvashisth/Documents/NIPostcodes.csv", sep = ",", header = T)
Limavady <- read.csv("c:/Users/pvashisth/Documents/Limavady.csv", sep = ",", header = T)
Limavady <- read.csv("c:/Users/pvashisth/Documents/Limavady.csv", sep = ",", header = T)
str(Limavady)
summary(Limavady_data)
names(Data_Post) <- c("Organisation_Name", "Sub_building_Name", "Building_Name", "Number", "Primary_Thorfare", "Alt_Thorfare", "Secondary_Thorfare",     "Locality", "Townland", "Town", "County", "Postcode", "X_Coordinates", "Y_Coordinates", "Primary_Key")
nrow(Data_Post)
Data_Post[Data_Post == ''] <- NA
mean(!complete.cases(Data_Post))
data_missing <- Data_Post[!complete.cases(Data_Post),]
sum(is.na(data_missing))
sapply(data_missing, function(value) sum(is.na(value)))
attach(Data_Post)
Data_Post <- Data_Post[order(decreasing = FALSE, County),]
head(Data_Post, n = 10)
Data_Post <- rapply(Data_Post, as.character, classes = "factor", how = "replace")
sapply(Data_Post, mode)
str(Data_Post)
Data_Post <- subset(format_data, select = c(15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
head(Data_Post)
Data_Post <- subset(Data_Post, select = c(15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
head(Data_Post)
attach(Data_Post)
Limavady_data = subset(Data_Post, grepl('LIMAVADY', Locality) & grepl('LIMAVADY', Townland) & grepl('LIMAVADY', Town))
summary(Limavady_data)
head(Limavady_data)
str(Limavady_data)
write.csv(Limavady_data, file = "Limavady_test.csv", row.names = FALSE)
Limavady <- read.csv("c:/Users/pvashisth/Documents/Limavady_test.csv", sep = ",", header = T)
str(Limavady)
Limavady <- read.csv("c:/Users/pvashisth/Source/Repos/DataScience/Lab_CA2/Limavady_test.csv", sep = ",", header = T)
str(Limavady)
head(Limavady)
str(Limavady_data)
Limavady_data <- subset(Data_Post, grepl('LIMAVADY', Locality) & grepl('LIMAVADY', Townland) & grepl('LIMAVADY', Town))
str(Limavady_data)
head(Limavady_data)
head(Limavady)
write.csv(Limavady, file = "CleanNIPostcodeData.csv", row.names = FALSE)
Clean_data <- read.csv("c:/Users/pvashisth/Source/Repos/DataScience/Lab_CA2/CleanNIPostcodeData.csv", sep = ",", header = T)
clean_data <- read.csv("c:/Users/pvashisth/Source/Repos/DataScience/Lab_CA2/CleanNIPostcodeData.csv", sep = ",", header = T)
str(clean_data)
CleanNIPostcodeData <- read.csv("c:/Users/pvashisth/Source/Repos/DataScience/Lab_CA2/CleanNIPostcodeData.csv", sep = ",", header = T)
summary(CleanNIPostcodeData)
str(CleanNIPostcodeData)
Data_Post <- read.csv("c:/Users/pvashisth/Documents/NIPostcodes.csv", sep = ",", header = T)
str(Data_Post)
    "Locality", "Townland", "Town", "County", "Postcode", "X_Coordinates", "Y_Coordinates", "Primary_Key")
names(Data_Post) <- c("Organisation_Name", "Sub_building_Name", "Building_Name", "Number", "Primary_Thorfare", "Alt_Thorfare", "Secondary_Thorfare",     "Locality", "Townland", "Town", "County", "Postcode", "X_Coordinates", "Y_Coordinates", "Primary_Key")
head(Data_Post)
head(Data_Post)
nrow(Data_Post)
Data_Post[Data_Post == ''] <- NA
mean(!complete.cases(Data_Post))
