setwd(‘C:\Users\pvashisth\Source\Repos\DataScience\CA3\Data’) filenames <- list.files(full.names = TRUE) <- lapply(filenames, function(i) {     read.csv(i, header = FALSE, skip = 4) }) df <- do.call(rbind.data.frame, All) write.csv(df, ”AllNICrimeData.csv”, row.names = FALSE)
setwd('C:\Users\pvashisth\Source\Repos\DataScience\CA3\Data') filenames <- list.files(full.names = TRUE) <- lapply(filenames, function(i) {     read.csv(i, header = FALSE, skip = 4) }) df <- do.call(rbind.data.frame, All) write.csv(df, 'AllNICrimeData.csv', row.names = FALSE)
setwd(@'C:\Users\pvashisth\Source\Repos\DataScience\CA3\Data')
?setwd('C:\Users\pvashisth\Source\Repos\DataScience\CA3\Data')
setwd('C:\\Users\pvashisth\Source\Repos\DataScience\CA3\Data')
setwd('C:\\Users\\pvashisth\\Source\\Repos\\DataScience\\CA3\\Data')
filenames <- list.files(full.names = TRUE) <- lapply(filenames, function(i) {     read.csv(i, header = FALSE, skip = 4) }) df <- do.call(rbind.data.frame, All) write.csv(df, 'AllNICrimeData.csv', row.names = FALSE)
filenames <- list.files(full.names = TRUE) All <- lapply(filenames, function(i) {     read.csv(i, header = FALSE, skip = 4) }) df <- do.call(rbind.data.frame, All) write.csv(df, 'AllNICrimeData.csv', row.names = FALSE)
head(AllNICrimeData)
AllNICrimeData <- read.csv(AllNICrimeData.csv, header = TRUE, sep = "")
all_data <- read.csv(AllNICrimeData.csv, header = TRUE, sep = ",", header= TRUE)
all_data <- read.csv(AllNICrimeData.csv, sep = ",", header= TRUE)
all_data <- read.csv(AllNICrimeData.csv, sep = ",", header= TRUE)
?getwd
setwd('C:\\Users\\pvashisth\\Source\\Repos\\DataScience\\CA3') getwd("Data")
setwd('C:\\Users\\pvashisth\\Source\\Repos\\DataScience\\CA3') getwd("\\Data")
getwd('\\Data')
setwd('C:\\Users\\pvashisth\\Source\\Repos\\DataScience\\CA3') getwd('\\Data')
setwd('C:\\Users\\pvashisth\\Source\\Repos\\DataScience\\CA3\\Data') filenames <- list.files(full.names = TRUE) All <- lapply(filenames, function(i) {     read.csv(i, header = FALSE, skip = 4) }) df <- do.call(rbind.data.frame, All) write.csv(df, 'AllNICrimeData.csv', row.names = FALSE)
all_data <- read.csv("c:/Users/pvashisth/Documents/AllNICrimeData.csv, sep = "," , header= TRUE")
setwd('C:\\Users\\pvashisth\\Source\\Repos\\DataScience\\CA3\\Data') filenames <- list.files(full.names = TRUE) All <- lapply(filenames, function(i) {     read.csv(i, header = FALSE, skip = 4) }) df <- do.call(rbind.data.frame, All) write.csv(df, 'AllNICrimeData.csv', row.names = FALSE)
all_data <- read.csv('C:/Users/pvashisth/Source/Repos/DataScience/CA3/Data/AllNICrimeData.csv, sep = "," , header= TRUE')
all_data <- read.csv("C:/Users/pvashisth/Source/Repos/DataScience/CA3/Data/AllNICrimeData.csv, sep = "," , header= TRUE")
all_data <- read.csv("c:/Users/pvashisth/Source/Repos/DataScience/CA3/Data/AllNICrimeData.csv, sep = "," , header= TRUE")
all_data <- read.csv("c:/Users/pvashisth/Source/Repos/DataScience/CA3/Data/AllNICrimeData.csv", sep = "," , header= T)
head(all_data)
Summary(all_data)
Summary(all_data)
str(all_data)
nrow(all_data)
NROW(all_data)
all_data[, !(colnames(all_data) %in% c("CrimeID", "Reported by", "Falls within", "LSOA code", "LSOA name", "Last outcome", "Context"))]
all_data
str(all_data)
str(all_data)
all_data[, !(colnames(all_data) %in% c("CrimeID", "Reported by", "Falls within", "LSOA code", "LSOA name", "Last outcome", "Context"))]
str(all_data)
all_data[, !(colnames(all_data) %in% c("CrimeID", "Reported by", "Falls within", "LSOA code", "LSOA name", "Last outcome", "Context"))]setwd('C:\\Users\\pvashisth\\Source\\Repos\\DataScience\\CA3\\Data') filenames <- list.files(full.names = TRUE) All <- lapply(filenames, function(i) {     read.csv(i, header = TRUE) }) # lotto_file <- read.csv(header = TRUE, paste("c:/lotto/", csv_file, sep = ""), stringsAsFactors = FALSE) df <- do.call(rbind.data.frame, All)
filenames <- list.files(full.names = TRUE) All <- lapply(filenames, function(i) {     read.csv(i, header = TRUE, skip=4) })
df <- do.call(rbind.data.frame, All)
filenames <- list.files(full.names = TRUE) All <- lapply(filenames, function(i) {     read.csv(i, header = FALSE, skip=4) }) df <- do.call(rbind.data.frame, All)
head(df)
filenames <- list.files(full.names = TRUE) All <- lapply(filenames, function(i) {     read.csv(i, header = TRUE, skip=4) }) df <- do.call(rbind.data.frame, All)
multmerge = function(mypath) {     filenames = list.files(path = mypath, full.names = TRUE)     datalist = lapply(filenames, function(x) { read.csv(file = x, header = T) })     Reduce(function(x, y) { merge(x, y) }, datalist)     } mymergedata = multmerge('C:\\Users\\pvashisth\\Source\\Repos\\DataScience\\CA3\\Data')
head(mymergedata)
mymergedata
write.csv(mymergedata, 'AllNICrimeData.csv', row.names = FALSE)
library(dplyr) library(readr) df <- list.files(full.names = TRUE) %>%   lapply(read_csv) %>%   bind_rows
head(df)
setwd('C:\\Users\\pvashisth\\Source\\Repos\\DataScience\\CA3\\Data')
library(dplyr) library(readr) df <- list.files(full.names = TRUE) %>%   lapply(read_csv) %>%   bind_rows write.csv(df, 'AllNICrimeData.csv', row.names = FALSE)
read.csv("c:/Users/pvashisth/Source/Repos/DataScience/CA3/Data/AllNICrimeData.csv", sep = "," , header= T)
str(AllNICrimeData)
str(AllNICrimeData)
AllNICrimeData <- read.csv("c:/Users/pvashisth/Source/Repos/DataScience/CA3/Data/AllNICrimeData.csv", sep = ",", header = T)
str(AllNICrimeData)
nrow(AllNICrimeData)
AllNICrimeData[, !(colnames(AllNICrimeData) %in% c("CrimeID", "Reported by", "Falls within", "LSOA code", "LSOA name", "Last outcome", "Context"))]
str(AllNICrimeData)
df <- df[, !(columns(df) %in% c("CrimeID"))] print(df)
head(df)
df <- df[, !(columns(df) %in% c("Crime ID"))] print(df)
df <- df[, !(columns(df) %in% c("Month"))] print(df)
head(df)
AllNICrimeData <- read.csv("c:/Users/pvashisth/Source/Repos/DataScience/CA3/Data/AllNICrimeData.csv", sep = ",", header = T)
head(AllN)
head(AllN)
head(AllNICrimeData)
typeof(AllNICrimeData)
AllNICrimeData1 <- read.csv("c:/Users/pvashisth/Source/Repos/DataScience/CA3/Data/AllNICrimeData.csv", header = T, colClasses=c("Month"))
AllNICrimeData1 <- read.csv("c:/Users/pvashisth/Source/Repos/DataScience/CA3/Data/AllNICrimeData.csv", sep = ",", header = T, colClasses=c("Month"))
AllNICrimeData1 <- read.csv("c:/Users/pvashisth/Source/Repos/DataScience/CA3/Data/AllNICrimeData.csv", header = T)[, c('Month')]
head(AllN)
head(AllNICrimeData1)
AllNICrimeData1 <- read.csv("c:/Users/pvashisth/Source/Repos/DataScience/CA3/Data/AllNICrimeData.csv", header = T)[, c('Crime ID', 'Month')]
AllNICrimeData1 <- read.csv("c:/Users/pvashisth/Source/Repos/DataScience/CA3/Data/AllNICrimeData.csv", header = T)[, c('CrimeID', 'Month')]
AllNICrimeData1 <- read.csv("c:/Users/pvashisth/Source/Repos/DataScience/CA3/Data/AllNICrimeData.csv", header = T)[, c('Crime ID', 'Month')]
head(AllNICrimeData)> head(AllNICrimeData)
AllNICrimeData1 <- read.csv("c:/Users/pvashisth/Source/Repos/DataScience/CA3/Data/AllNICrimeData.csv", header = T)
typeof(AllNICrimeData)
head(AllNICrimeData)
str(AllNICrimeData)
data.table
?data.table
select(AllNICrimeData1, -1)
str(AllNICrimeData)
updated_data <- select(AllNICrimeData1, -1)
head(updated_data)
updated_data <- select(AllNICrimeData1, -1, -3, -4, -8, -9, -11)
head(updated_data)
str(AllNICrimeData)
head(updated_data)
str(updated_data)
up
updated.data$Crime type < - as.fac
updated.data$Crime type < - as.factor(updated.data)
updated.data$Crimetype < - as.factor(updated.data)
head(updated_data)
str(updated_data)
updated_data$Crime.type < - as.factor(Crime.type)
head(updated.head)
head(updated.data)
updated_data$Crimetype < - as.factor(Crimetype)
updated_data$Crime.type <- as.factor(Crime.type)
updated_data$Crime type <- as.factor(Crime type)
str(AllNICrimeData)
str(updated_data)
colnames(update_factor)[which(colnames(update_factor) == 'Crime type')] <- 'Crime_type'
str(updated_data)
colnames(update_data)[which(colnames(update_data) == 'Crime type')] <- 'Crime_type'
colnames(updated_data)[which(colnames(updated_data) == 'Crime type')] <- 'Crime_type'
str(updated_data)
attach(updated_data)
updated_data$Crime_type <- as.character(Crime_type)
updated_data$Crime_type <- as.character(updated_data$Crime_type)
updated_data1 <- colnames(updated_data)[which(colnames(updated_data) == 'Crime type')] <- 'Crime_type'
str(updated_data1)
nrow(updated_data)
str(updated_data)
 summary(updated_data)
updated_data[!complete.cases(updated_data),]
missing_rows <- updated_data[!complete.cases(updated_data),]
missing_rows
summary(missing_rows)
sum(is.na(updated_data$Longitude, updated_data$Latitude))
sum(is.na(updated_data$Longitude))
summary(updated_data)
attach(updated_data)
attach(updated_data)
colSums(is.na(updated_data))
sum(is.na(updated_data)) 
head(updated_data)
updated_data <-na.omit(updated_data[-1,-4,-5,-6])
summary(updated_data)
df <- list.files(full.names = TRUE) %>%   lapply(read_csv) %>%   bind_rows write.csv(df, 'AllNICrimeData.csv', row.names = FALSE)
df <- list.files(full.names = TRUE) %>%   lapply(read_csv) %>%   bind_rows write.csv(df, 'AllNICrimeData.csv', row.names = FALSE)
AllNICrimeData1 <- read.csv("c:/Users/pvashisth/Source/Repos/DataScience/CA3/Data/AllNICrimeData.csv", header = T)
typeof(AllNICrimeData)
str(AllNICrimeData)
nrow(AllNICrimeData)
head(AllNICrimeData)
AllNICrimeData <- select(AllNICrimeData, -1, -3, -4, -8, -9, -11, -12)
head(AllNICrimeData)
str(AllNICrimeData)
summary(AllNICrimeData)
sum(is.na(AllNICrimeData))
colSums(is.na(updated_data))
AllNICrimeData <- na.omit(AllNICrimeData[-1, -4, -5, -6])
AllNICrimeData <- na.omit(AllNICrimeData[-1, -4, -5])
colSums(is.na(AllNICrimeData))
str(AllNICrimeData)
attach(AllNICrimeData)
AllNICrimeData <- colnames(AllNICrimeData)[which(colnames(AllNICrimeData) == 'Crime type')] <- 'Crime_type'
str(AllNICrimeData)
summary(AllNICrimeData)
head(AllNICrimeData)
df <- list.files(full.names = TRUE) %>%   lapply(read_csv) %>%   bind_rows write.csv(df, 'AllNICrimeData.csv', row.names = FALSE)
AllNICrimeData1 <- read.csv("c:/Users/pvashisth/Source/Repos/DataScience/CA3/Data/AllNICrimeData.csv", header = T)
head(AllNICrimeData)
AllNICrimeData1 <- read.csv("c:/Users/pvashisth/Source/Repos/DataScience/CA3/Data/AllNICrimeData.csv", header = T)
nrow(AllNICrimeData)
library(dplyr) library(readr) df <- list.files(full.names = TRUE) %>%   lapply(read_csv) %>%   bind_rows write.csv(df, 'AllNICrimeData.csv', row.names = FALSE)
AllNICrimeData <- read.csv("c:/Users/pvashisth/Source/Repos/DataScience/CA3/Data/AllNICrimeData.csv", header = T)
nrow(AllNICrimeData)
head(AllNICrimeData)
AllNICrimeData <- select(AllNICrimeData, -1, -3, -4, -8, -9, -11, -12)
head(AllNICrimeData)
summary(AllNICrimeData)
sum(is.na(AllNICrimeData))
AllNICrimeData <- na.omit(AllNICrimeData[-1, -4, -5])
colSums(is.na(AllNICrimeData))
str(AllNICrimeData)
AllNICrimeData$Crime.type <- as.character(AllNICrimeData$Crime.type)
head(AllNICrimeData)
str(AllNICrimeData)
AllNICrimeData <- sapply(AllNICrimeData, function(x) {     x <- gsub("on or near", '', x)  } )
head(AllNICrimeData)
install.packages("dplyr") # Question 1 setwd('C:\\Users\\pvashisth\\Source\\Repos\\DataScience\\CA3\\Data') library(dplyr) library(readr) df <- list.files(full.names = TRUE) %>%   lapply(read_csv) %>%   bind_rows write.csv(df, 'AllNICrimeData.csv', row.names = FALSE) # reading the newly created csv file combined dataset AllNICrimeData <- read.csv("c:/Users/pvashisth/Source/Repos/DataScience/CA3/Data/AllNICrimeData.csv", header = T) # Total number of rows nrow(AllNICrimeData) # Total number of records typeof(AllNICrimeData) str(AllNICrimeData) # 2nd question # checking the head of the dataset head(AllNICrimeData) # removing columns from the dataset (CrimeID, Reported by, Falls within, LSOA code, LSOA name, last outcome and context) AllNICrimeData <- select(AllNICrimeData, -1, -3, -4, -8, -9, -11, -12) head(AllNICrimeData) str(AllNICrimeData) # columns number in index 1, 3, 4, 8, 9, 11, 12 ######################################################################################### ####################################### Data Cleaning before further processing # summary of the dataset to see how dataset looks like summary(AllNICrimeData) # finding the total Na in the dataset sum(is.na(AllNICrimeData)) # sum(is.na(updated_data$Month)) # let's be more precise and find the exact missing values per columns colSums(is.na(AllNICrimeData))
head(AllNICrimeData)
AllNICrimeData <- na.omit(AllNICrimeData[-1,-4,-5])
colSums(is.na(AllNICrimeData))
setwd('C:\\Users\\pvashisth\\Source\\Repos\\DataScience\\CA3\\Data') library(dplyr) library(readr) df <- list.files(full.names = TRUE) %>%   lapply(read_csv) %>%   bind_rows write.csv(df, 'AllNICrimeData.csv', row.names = FALSE) # reading the newly created csv file combined dataset AllNICrimeData <- read.csv("c:/Users/pvashisth/Source/Repos/DataScience/CA3/Data/AllNICrimeData.csv", header = T) # Total number of rows nrow(AllNICrimeData) # Total number of records typeof(AllNICrimeData) str(AllNICrimeData) # 2nd question # checking the head of the dataset head(AllNICrimeData) # removing columns from the dataset (CrimeID, Reported by, Falls within, LSOA code, LSOA name, last outcome and context) AllNICrimeData <- select(AllNICrimeData, -1, -3, -4, -8, -9, -11, -12) head(AllNICrimeData) str(AllNICrimeData) # columns number in index 1, 3, 4, 8, 9, 11, 12 ######################################################################################### ####################################### Data Cleaning before further processing # summary of the dataset to see how dataset looks like summary(AllNICrimeData) # finding the total Na in the dataset sum(is.na(AllNICrimeData)) # sum(is.na(updated_data$Month)) # let's be more precise and find the exact missing values per columns colSums(is.na(AllNICrimeData))
test1 <- na.omit(AllNICrimeData[-1,-4,-5])
head(test1)
test2 <- na.omit(AllNICrimeData)
head(test2)
colSums(is.na(AllNICrimeData))
colSums(is.na(test2))
AllNICrimeData <- na.omit(AllNICrimeData)
colSums(is.na(AllNICrimeData))
library(dplyr) library(readr) df <- list.files(full.names = TRUE) %>%   lapply(read_csv) %>%   bind_rows write.csv(df, 'AllNICrimeData.csv', row.names = FALSE) # reading the newly created csv file combined dataset AllNICrimeData <- read.csv("c:/Users/pvashisth/Source/Repos/DataScience/CA3/Data/AllNICrimeData.csv", header = T) # Total number of rows nrow(AllNICrimeData) # Total number of records typeof(AllNICrimeData) str(AllNICrimeData) # 2nd question # checking the head of the dataset head(AllNICrimeData) # removing columns from the dataset (CrimeID, Reported by, Falls within, LSOA code, LSOA name, last outcome and context) AllNICrimeData <- select(AllNICrimeData, -1, -3, -4, -8, -9, -11, -12) head(AllNICrimeData) str(AllNICrimeData)
summary(AllNICrimeData)
setwd('C:\\Users\\pvashisth\\Source\\Repos\\DataScience\\CA3\\Data') library(dplyr) library(readr) df <- list.files(full.names = TRUE) %>%   lapply(read_csv) %>%   bind_rows write.csv(df, 'AllNICrimeData.csv', row.names = FALSE) # reading the newly created csv file combined dataset AllNICrimeData <- read.csv("c:/Users/pvashisth/Source/Repos/DataScience/CA3/Data/AllNICrimeData.csv", header = T) # Total number of rows nrow(AllNICrimeData) # Total number of records typeof(AllNICrimeData) str(AllNICrimeData) # 2nd question # checking the head of the dataset head(AllNICrimeData) # removing columns from the dataset (CrimeID, Reported by, Falls within, LSOA code, LSOA name, last outcome and context) AllNICrimeData <- select(AllNICrimeData, -1, -3, -4, -8, -9, -11, -12) head(AllNICrimeData) str(AllNICrimeData) summary(AllNICrimeData)
str(AllNICrimeData) summary(AllNICrimeData)
summary(AllNICrimeData)
sum(is.na(AllNICrimeData))
colSums(is.na(AllNICrimeData))
AllNICrimeData <- na.omit(AllNICrimeData)
colSums(is.na(AllNICrimeData))
str(AllNICrimeData)
AllNICrimeData$Crime.type <- as.character(AllNICrimeData$Crime.type)
str(AllNICrimeData)
test1 <- sapply(AllNICrimeData, function(x) {     x <- gsub("on or near", '', x)  }) head(test1)
AllNICrimeData$Location <- gsub("On or near", "", AllNICrimeData$Location, ignore.case = T)
head(AllNICrimeData)
str(AllNICrimeData)
postcode <- names(which.max(table(postcodes)))
head(AllNICrimeData)
CleanNIPostcodeData
str(CleanNIPostcodeData)
CleanNIPostcodeData <- read.csv("c:/Users/pvashisth/Source/Repos/DataScience/Lab_CA2/CleanNIPostcodeData.csv", sep = ",", header = T)
str(CleanNIPostcodeData)
head(AllNICrimeData)
find_a_postcode <- function(location)
{
    location <- unique(location)
    for (x in location)
    {
        names(which.max(table(CleanNIPostcodeData$Postcode[AllNICrimeData$Location[x] == CleanNIPostcodeData$Primary_Thorfare])))
    }
}
AllNICrimeData$Postcode <- find_a_postcode(AllNICrimeData$Location AllNICrimeData$Postcode <- find_a_postcode(AllNICrimeData$Location)
AllNICrimeData$Postcode <- find_a_postcode(AllNICrimeData$Location)
head(AllNICrimeData$Postcod)
head(AllNICrimeData$Postcod)
head(AllNICrimeData)
str(CleanNIPostcodeData)
head(CleanNIPostcodeData)
str(CleanNIPostcodeData)nrow(ALLNICrimeData)
str(AllNICrimeData)
nrow(ALLNICrimeData)
nrow(AllNICrimeData)
nrow(AllNICrimeData)
CleanNIPostcodeData <- read.csv("c:/Users/pvashisth/Source/Repos/DataScience/CA3/Data/CleanNIPostcodeData.csv", header = T)
head(CleanNIPostcodeData)
str(CleanNIPostcodeData)
p <- CleanNIPostcodeData$Primary_Thorfare
p
length(p)
type(p)
typ
typeof(p)
len(p)
length(p)
head(AllNICrimeData)
head(AllNICrimeData)
find_a_postcode <- function(location) 
{
    lr <- tolower(location)
    primary_thorfare <- CleanNIPostcodeData$Primary_Thorfare
    matched_index = NULL;
    count <- 0
    for (pt in primary_thorfare) {         pt_lr <- tolower(pt)         if (lr == pt_lr) {             matched_index = count         }         count <- count + 1     }
    post_code <- CleanNIPostcodeData$Postcode[matched_index]
    print(post_code)
}
loc <- AllNICrimeData$Location[0]
postCodeFound <- find_a_postcode(loc)
print(postCodeFound)
loc
head(AllN)
head(AllNICrimeData)
loc <- AllNICrimeData$Location[1]
postCodeFound <- find_a_postcode(loc)
print(postCodeFound)
loc
find_a_postcode <- function(location) 
{
    lr <- tolower(location)
    primary_thorfare <- CleanNIPostcodeData$Primary_Thorfare
    matched_index = NULL;
    count <- 1
    for (pt in primary_thorfare) {         pt_lr <- tolower(pt)         if (lr == pt_lr) {             matched_index = count         }         count <- count + 1     }
    post_code <- CleanNIPostcodeData$Postcode[matched_index]
    print(post_code)
}
loc <- AllNICrimeData$Location[1]
postCodeFound <- find_a_postcode(loc)
print(postCodeFound)
find_a_postcode <- function(location) 
{
    print(location)
    lr <- tolower(location)
    print(lr)
    primary_thorfare <- CleanNIPostcodeData$Primary_Thorfare
    matched_index = NULL;
    count <- 1
    for (pt in primary_thorfare) {         print(pt)         pt_lr <- tolower(pt)         print(pt_lr)         if (lr == pt_lr) {             matched_index = count         }         count <- count + 1     }
    post_code <- CleanNIPostcodeData$Postcode[matched_index]
    print(post_code)
}
loc <- AllNICrimeData$Location[1]
postCodeFound <- find_a_postcode(loc)
find_a_postcode <- function(location) 
{
    if (location == NULL) {
        print("Location was NULL")
        return;
    }
    lr <- tolower(location)
    primary_thorfare <- CleanNIPostcodeData$Primary_Thorfare
    matched_index = NULL;
    count <- 1
    for (pt in primary_thorfare) {         pt_lr <- tolower(pt)         if (lr == pt_lr) {             matched_index <- count             break;         }         count <- count + 1     }
    if (matched_index == NULL) {
        print("No match found")
        return;
    }
    post_code <- CleanNIPostcodeData$Postcode[matched_index]
    print(post_code)
}
loc <- AllNICrimeData$Location[1]
postCodeFound <- find_a_postcode(loc)
print(postCodeFound)
find_a_postcode <- function(location) 
{
    print(location)
    if (location == NULL) {
        print("Location was NULL")
        return;
    }
    lr <- tolower(location)
    primary_thorfare <- CleanNIPostcodeData$Primary_Thorfare
    matched_index = NULL;
    count <- 1
    for (pt in primary_thorfare) {         pt_lr <- tolower(pt)         if (lr == pt_lr) {             matched_index <- count             break;         }         count <- count + 1     }
    if (matched_index == NULL) {
        print("No match found")
        return;
    }
    post_code <- CleanNIPostcodeData$Postcode[matched_index]
    print(post_code)
}
loc <- AllNICrimeData$Location[1]
postCodeFound <- find_a_postcode(loc)
print(postCodeFound)
a <- "a" b <- "a" if (a == b) {     print("Wow") }
a <- "a" b <- "a" if (a == NULL) {     print("Wow") } else {     print("Meoh") }
a <- NULL b <- "a" if (a == '') {     print("Wow") } else {     print("Meoh") }
a <- '' b <- "a" if (a == '') {     print("Wow") } else {     print("Meoh") }
find_a_postcode <- function(location) 
{
    print(location)
    if (location == '') {
        print("Location was NULL")
        return;
    }
    lr <- tolower(location)
    primary_thorfare <- CleanNIPostcodeData$Primary_Thorfare
    matched_index = NULL;
    count <- 1
    for (pt in primary_thorfare) {         pt_lr <- tolower(pt)         if (lr == pt_lr) {             matched_index <- count             break;         }         count <- count + 1     }
    if (matched_index == NULL) {
        print("No match found")
        return;
    }
    post_code <- CleanNIPostcodeData$Postcode[matched_index]
    print(post_code)
}
loc <- AllNICrimeData$Location[1]
postCodeFound <- find_a_postcode(loc)
print(postCodeFound)
find_a_postcode <- function(location) 
{
    print(location)
    if (location == '') {
        print("Location was NULL")
        return;
    }
    lr <- tolower(location)
    primary_thorfare <- CleanNIPostcodeData$Primary_Thorfare
    matched_index = NULL;
    count <- 1
    for (pt in primary_thorfare) {         pt_lr <- tolower(pt)         print(pt_lr)         if (lr == pt_lr) {             matched_index <- count             break;         }         count <- count + 1     }
    if (matched_index == NULL) {
        print("No match found")
        return;
    }
    post_code <- CleanNIPostcodeData$Postcode[matched_index]
    print(post_code)
}
loc <- AllNICrimeData$Location[1]
postCodeFound <- find_a_postcode(loc)
find_a_postcode <- function(location) 
{
    print(location)
    if (location == '') {
        print("Location was NULL")
        return;
    }
    lr <- tolower(location)
    primary_thorfare <- CleanNIPostcodeData$Primary_Thorfare
    matched_index = NULL;
    count <- 1
    for (pt in primary_thorfare) {         if (pt == NA) {             return;         }         pt_lr <- tolower(pt)         print(pt_lr)         if (lr == pt_lr) {             matched_index <- count             break;         }         count <- count + 1     }
    if (matched_index == NULL) {
        print("No match found")
        return;
    }
    post_code <- CleanNIPostcodeData$Postcode[matched_index]
    print(post_code)
}
loc <- AllNICrimeData$Location[1]
postCodeFound <- find_a_postcode(loc)
find_a_postcode <- function(location) 
{
    print(location)
    if (location == '') {
        print("Location was NULL")
        return;
    }
    lr <- tolower(location)
    primary_thorfare <- CleanNIPostcodeData$Primary_Thorfare
    matched_index = NULL;
    count <- 1
    for (pt in primary_thorfare) {         if (pt == '') {             return;         }         pt_lr <- tolower(pt)         print(pt_lr)         if (lr == pt_lr) {             matched_index <- count             break;         }         count <- count + 1     }
    if (matched_index == NULL) {
        print("No match found")
        return;
    }
    post_code <- CleanNIPostcodeData$Postcode[matched_index]
    print(post_code)
}
# run for all location in data set.
# all_locations <- AllNICrimeData$Location
loc <- AllNICrimeData$Location[1]
postCodeFound <- find_a_postcode(loc)
find_a_postcode <- function(location) 
{
    print(location)
    if (is.na(location) | location == '') {
        print("Location was NULL")
        return;
    }
    lr <- tolower(location)
    primary_thorfare <- CleanNIPostcodeData$Primary_Thorfare
    matched_index = NULL;
    count <- 1
    for (pt in primary_thorfare) {         if (is.na(pt) | pt == '') {             return;         }         pt_lr <- tolower(pt)         print(pt_lr)         if (lr == pt_lr) {             matched_index <- count             break;         }         count <- count + 1     }
    if (matched_index == NULL) {
        print("No match found")
        return;
    }
    post_code <- CleanNIPostcodeData$Postcode[matched_index]
    print(post_code)
}
# run for all location in data set.
# all_locations <- AllNICrimeData$Location
loc <- AllNICrimeData$Location[1]
postCodeFound <- find_a_postcode(loc)
a <- NA b <- "a" if (a == '') {     print("Wow") } else {     print("Meoh") }
if (is.na(a)) {     print("Wow") } else {     print("Meoh") }
find_a_postcode <- function(location) 
{
    print(location)
    if (is.na(location) | location == '') {
        print("Location was NULL")
        return;
    }
    lr <- tolower(location)
    primary_thorfare <- CleanNIPostcodeData$Primary_Thorfare
    matched_index = NULL;
    count <- 1
    for (pt in primary_thorfare) {         if (!is.na(pt) | pt != '') {             pt_lr <- tolower(pt)             print(pt_lr)             if (lr == pt_lr) {                 matched_index <- count                 break;             }             count <- count + 1         }     }
    if (matched_index == NULL) {
        print("No match found")
        return;
    }
    post_code <- CleanNIPostcodeData$Postcode[matched_index]
    print(post_code)
}
# run for all location in data set.
# all_locations <- AllNICrimeData$Location
loc <- AllNICrimeData$Location[1]
postCodeFound <- find_a_postcode(loc)
print(postCodeFound)
find_a_postcode <- function(location) 
{
    print(location)
    if (is.na(location) | location == '') {
        print("Location was NULL")
        return;
    }
    lr <- tolower(location)
    primary_thorfare <- CleanNIPostcodeData$Primary_Thorfare
    matched_index = NULL;
    count <- 1
    for (pt in primary_thorfare) {         if (!is.na(pt)) {             pt_lr <- tolower(pt)             print(pt_lr)             if (lr == pt_lr) {                 matched_index <- count                 break;             }             count <- count + 1         }     }
    if (matched_index == NULL) {
        print("No match found")
        return;
    }
    post_code <- CleanNIPostcodeData$Postcode[matched_index]
    print(post_code)
}
# run for all location in data set.
# all_locations <- AllNICrimeData$Location
loc <- AllNICrimeData$Location[1]
postCodeFound <- find_a_postcode(loc)
print(postCodeFound)
find_a_postcode <- function(location) 
{
    print(location)
    if (is.na(location)) {
        print("Location was NULL")
        return;
    }
    lr <- tolower(location)
    primary_thorfare <- CleanNIPostcodeData$Primary_Thorfare
    matched_index = NULL;
    count <- 1
    for (pt in primary_thorfare) {         if (!is.na(pt)) {             pt_lr <- tolower(pt)             if (lr == pt_lr) {                 matched_index <- count                 break;             }             count <- count + 1         }     }
    if (matched_index == NULL) {
        print("No match found")
        return;
    }
    post_code <- CleanNIPostcodeData$Postcode[matched_index]
    print(post_code)
}
# run for all location in data set.
# all_locations <- AllNICrimeData$Location
loc <- AllNICrimeData$Location[1]
postCodeFound <- find_a_postcode(loc)
print(postCodeFound)
find_a_postcode <- function(location) 
{
    print(location)
    if (is.na(location)) {
        print("Location was NULL")
        return;
    }
    lr <- tolower(location)
    primary_thorfare <- CleanNIPostcodeData$Primary_Thorfare
    matched_index = 0;
    count <- 1
    for (pt in primary_thorfare) {         if (!is.na(pt)) {             pt_lr <- tolower(pt)             if (lr == pt_lr) {                 matched_index <- count                 break;             }             count <- count + 1         }     }
    post_code <- CleanNIPostcodeData$Postcode[matched_index]
    print(post_code)
}
# run for all location in data set.
# all_locations <- AllNICrimeData$Location
loc <- AllNICrimeData$Location[1]
postCodeFound <- find_a_postcode(loc)
print(postCodeFound)
find_a_postcode <- function(location) 
{
    print(location)
    if (is.na(location)) {
        print("Location was NULL")
        return;
    }
    lr <- tolower(location)
    primary_thorfare <- CleanNIPostcodeData$Primary_Thorfare
    matched_index = 0;
    count <- 1
    for (pt in primary_thorfare) {         if (!is.na(pt)) {             pt_lr <- tolower(pt)             if (lr == pt_lr) {                 matched_index <- count                 break;             }             count <- count + 1         }     }
    post_code <- CleanNIPostcodeData$Postcode[matched_index]
    return(post_code)
}
# run for all location in data set.
# all_locations <- AllNICrimeData$Location
loc <- AllNICrimeData$Location[1]
postCodeFound <- find_a_postcode(loc)
print(postCodeFound)
find_a_postcode <- function(location) 
{
    print(location)
    if (is.na(location)) {
        print("Location was NULL")
        return;
    }
    lr <- tolower(location)
    primary_thorfare <- CleanNIPostcodeData$Primary_Thorfare
    matched_index = 0;
    count <- 1
    for (pt in primary_thorfare) {         if (!is.na(pt)) {             pt_lr <- tolower(pt)             if (lr == pt_lr) {                 matched_index <- count                 break;             }             count <- count + 1         }     }
    print("Matched Index")
    print(matched_index)
    print("Count")
    print(count)
    post_code <- CleanNIPostcodeData$Postcode[matched_index]
    return(post_code)
}
# run for all location in data set.
# all_locations <- AllNICrimeData$Location
loc <- AllNICrimeData$Location[1]
postCodeFound <- find_a_postcode(loc)
a <- "A" b <- "a" if (tolower(a) == b) {     print("Wow") } else {     print("Meoh") }
matched_index = integer[];
find_a_postcode <- function(location) 
{
    print(location)
    if (is.na(location)) {
        print("Location was NULL")
        return;
    }
    lr <- tolower(location)
    primary_thorfare <- CleanNIPostcodeData$Primary_Thorfare
    matched_index <- 0;
    count <- 1
    for (pt in primary_thorfare) {         if (!is.na(pt)) {             pt_lr <- tolower(pt)             if (lr == pt_lr) {                 matched_index <- count                 break;             }             count <- count + 1         }     }
    print("Matched Index")
    print(matched_index)
    print("Count")
    print(count)
    post_code <- CleanNIPostcodeData$Postcode[matched_index]
    return(post_code)
}
# run for all location in data set.
# all_locations <- AllNICrimeData$Location
loc <- AllNICrimeData$Location[1]
postCodeFound <- find_a_postcode(loc)
post
postCodeFound> postCodeFound
postCodeFound
find_a_postcode <- function(location) 
{
    print(location)
    if (is.na(location)) {
        print("Location was NULL")
        return;
    }
    lr <- tolower(location)
    primary_thorfare <- CleanNIPostcodeData$Primary_Thorfare
    matched_index <- 0;
    count <- 1
    for (pt in primary_thorfare) {         if (!is.na(pt)) {             pt_lr <- tolower(pt)             if (lr == pt_lr) {                 matched_index <- count                 break;             }             count <- count + 1         }     }
    print("Matched Index")
    print(matched_index)
    print("Count")
    print(count)
    post_code <- CleanNIPostcodeData$Postcode[matched_index]
    return(post_code)
}
# run for all location in data set.
# all_locations <- AllNICrimeData$Location
loc <- AllNICrimeData$Location[1]
postCodeFound <- find_a_postcode(loc)
head(AllNICrimeData)
aaa <- "  sdsd  " aab <- trimws(aaa) print(aab)
find_a_postcode <- function(location) 
{
    print(location)
    if (is.na(location)) {
        print("Location was NULL")
        return;
    }
    lr <- tolower(location)
    lr <- trimws(lr)
    primary_thorfare <- CleanNIPostcodeData$Primary_Thorfare
    matched_index <- 0;
    count <- 1
    for (pt in primary_thorfare) {         if (!is.na(pt)) {             pt_lr <- tolower(pt)             pt_lr <- trimws(pt_lr)             if (lr == pt_lr) {                 prin("FOUND")                 matched_index <- count                 break;             }             count <- count + 1         }     }
    print("Matched Index")
    print(matched_index)
    print("Count")
    print(count)
    post_code <- CleanNIPostcodeData$Postcode[matched_index]
    return(post_code)
}
# run for all location in data set.
# all_locations <- AllNICrimeData$Location
loc <- AllNICrimeData$Location[1]
postCodeFound <- find_a_postcode(loc)
find_a_postcode <- function(location) 
{
    print(location)
    if (is.na(location)) {
        print("Location was NULL")
        return;
    }
    lr <- tolower(location)
    lr <- trimws(lr)
    primary_thorfare <- CleanNIPostcodeData$Primary_Thorfare
    matched_index <- 0;
    count <- 1
    for (pt in primary_thorfare) {         if (!is.na(pt)) {             pt_lr <- tolower(pt)             pt_lr <- trimws(pt_lr)             if (lr == pt_lr) {                 print("FOUND")                 matched_index <- count                 break;             }             count <- count + 1         }     }
    print("Matched Index")
    print(matched_index)
    print("Count")
    print(count)
    post_code <- CleanNIPostcodeData$Postcode[matched_index]
    return(post_code)
}
# run for all location in data set.
# all_locations <- AllNICrimeData$Location
loc <- AllNICrimeData$Location[1]
postCodeFound <- find_a_postcode(loc)
print(postCodeFound)
find_a_postcode <- function(location) 
{
    print(location)
    if (is.na(location)) {
        print("Location was NULL")
        return;
    }
    lr <- tolower(location)
    lr <- trimws(lr)
    primary_thorfare <- CleanNIPostcodeData$Primary_Thorfare
    matched_index <- 0;
    count <- 1
    for (pt in primary_thorfare) {         if (!is.na(pt)) {             pt_lr <- tolower(pt)             pt_lr <- trimws(pt_lr)             if (lr == pt_lr) {                 print(pt_lr)                 matched_index <- count                 break;             }             count <- count + 1         }     }
    print("Matched Index")
    print(matched_index)
    print("Count")
    print(count)
    post_code <- CleanNIPostcodeData$Postcode[matched_index]
    return(post_code)
}
# run for all location in data set.
# all_locations <- AllNICrimeData$Location
loc <- AllNICrimeData$Location[1]
postCodeFound <- find_a_postcode(loc)
print(postCodeFound)
find_a_postcode <- function(location) 
{
    print(location)
    if (is.na(location)) {
        print("Location was NULL")
        return;
    }
    lr <- tolower(location)
    lr <- trimws(lr)
    primary_thorfare <- CleanNIPostcodeData$Primary_Thorfare
    matched_index <- 0;
    count <- 1
    for (pt in primary_thorfare) {         if (!is.na(pt)) {             pt_lr <- tolower(pt)             pt_lr <- trimws(pt_lr)             if (lr == pt_lr) {                 print(pt_lr)                 matched_index <- count                 break;             }         }         count <- count + 1     }
    print("Matched Index")
    print(matched_index)
    print("Count")
    print(count)
    post_code <- CleanNIPostcodeData$Postcode[matched_index]
    return(post_code)
}
# run for all location in data set.
# all_locations <- AllNICrimeData$Location
loc <- AllNICrimeData$Location[1]
postCodeFound <- find_a_postcode(loc)
print(postCodeFound)
all_locations <- AllNICrimeData$Location
postcode_array <- array[]
for (location in all_locations) {     postcode_array.append(find_a_postcode(location)) }
arrrr <- àrray[1, 2, 3]
print(arrr[1])
arrrr <- àrray[1, 2, 3]
print(arrrr[1])
ar <- àrray[1, 2, 3]
ar <- c(1, 2, 3)
print(ar[1])
ar <- c()
ar[1] <- 23
print(ar[1])
all_locations <- AllNICrimeData$Location
postcode_array <- c()
array_index <- 1
for (location in all_locations) {     postcode_array[array_index] <- find_a_postcode(location))     array_index <- array_index + 1 }
all_locations <- AllNICrimeData$Location
postcode_array <- c()
array_index <- 1
for (location in all_locations) {     postcode_array[array_index] <- find_a_postcode(location)     array_index <- array_index + 1 }
find_a_postcode <- function(location) 
{
    if (is.na(location)) {
        print("Location was NULL")
        return;
    }
    lr <- tolower(location)
    lr <- trimws(lr)
    primary_thorfare <- CleanNIPostcodeData$Primary_Thorfare
    matched_index <- 0;
    count <- 1
    for (pt in primary_thorfare) {         if (!is.na(pt)) {             pt_lr <- tolower(pt)             pt_lr <- trimws(pt_lr)             if (lr == pt_lr) {                 matched_index <- count                 break;             }         }         count <- count + 1     }
    post_code <- CleanNIPostcodeData$Postcode[matched_index]
    return(post_code)
}
all_locations <- AllNICrimeData$Location
postcode_array <- c()
array_index <- 1
for (location in all_locations) {     postcode_array[array_index] <- find_a_postcode(location)     array_index <- array_index + 1 }
ar <- c()
ar[1] <- NA
ar[1]
ar <- c()
ar[1] <- ''
ar <- c()
ar[1] <- ''
ar[1]
ar <- c()
ar[1] <- NULL
ar[1]
ar <- c()
ar[1] <- 1
ar[1]
pc <- find_a_postcode("salsibury place")
type
typeof(pc)
pc
all_locations <- AllNICrimeData$Location postcode_array <- c() array_index <- 1 count_try <- 0 for (location in all_locations) {     if (count_try > 10) {         break;     }     matched_location <- find_a_postcode(location)     if (!is.integer(matched_location)) {         postcode_array[array_index] <- matched_location         array_index <- array_index + 1         count_try <- count_try + 1     } }
all_locations <- AllNICrimeData$Location postcode_array <- c() array_index <- 1 count_try <- 0 for (location in all_locations) {     if (count_try > 10) {         break;     }     matched_location <- find_a_postcode(location)     if (!is.integer(matched_location)) {         print(matched_location)         postcode_array[array_index] <- matched_location         array_index <- array_index + 1         count_try <- count_try + 1     } }
all_locations <- AllNICrimeData$Location postcode_array <- c() array_index <- 1 count_try <- 0 for (location in all_locations) {     if (count_try > 10) {         break;     }     matched_location <- find_a_postcode(location)     if (!is.integer(matched_location)) {         print(matched_location)         print(typeof(matched_location))         postcode_array[array_index] <- matched_location         array_index <- array_index + 1         count_try <- count_try + 1     } }
all_locations <- AllNICrimeData$Location postcode_array <- c() array_index <- 1 count_try <- 0 for (location in all_locations) {     if (count_try > 10) {         break;     }     matched_location <- find_a_postcode(location)     if (!is.integer(matched_location)) {         print(matched_location)         print(typeof(matched_location))         postcode_array[array_index] <- matched_location         array_index <- array_index + 1         count_try <- count_try + 1     } }
all_locations <- AllNICrimeData$Location postcode_array <- c() array_index <- 1 count_try <- 0 for (location in all_locations) {     if (count_try > 10) {         break;     }     matched_location <- find_a_postcode(location)     if (!is.integer(matched_location)) {         print(matched_location)         print(typeof(matched_location))         tryCatch({             postcode_array[array_index] <- matched_location             array_index <- array_index + 1         }, error = function(error_condition) {         }, warning = function(warning_condition) {         })         count_try <- count_try + 1     } }
all_locations <- AllNICrimeData$Location postcode_array <- c() array_index <- 1 count_try <- 0 for (location in all_locations) {     if (count_try > 10) {         break;     }     matched_location <- find_a_postcode(location)     if (!is.integer(matched_location)) {         print(matched_location)         print(typeof(matched_location))         tryCatch({             postcode_array[array_index] <- matched_location             array_index <- array_index + 1         }, error = function(error_condition) {             postcode_array[array_index] <- "error"             array_index <- array_index+1         }, warning = function(warning_condition) {         })         count_try <- count_try + 1     } }
postcode_array> postcode_array
postcode_array
all_locations <- AllNICrimeData$Location postcode_array <- c() array_index <- 1 count_try <- 0 for (location in all_locations) {     if (count_try > 1) {         break;     }     matched_location <- find_a_postcode(location)     if (!is.integer(matched_location)) {         print(matched_location)         print(typeof(matched_location))         tryCatch({             postcode_array[array_index] <- matched_location             array_index <- array_index + 1         }, error = function(error_condition) {             postcode_array[array_index] <- "error"             array_index <- array_index+1         }, warning = function(warning_condition) {             postcode_array[array_index] <- "error"             array_index <- array_index + 1         })         count_try <- count_try + 1     } }
postcode_array
all_locations <- AllNICrimeData$Location postcode_array <- c() array_index <- 1 count_try <- 0 for (location in all_locations) {     if (count_try > 1) {         break;     }     matched_location <- find_a_postcode(location)     if (!is.integer(matched_location)) {         print(matched_location)         print(typeof(matched_location))         tryCatch({             postcode_array[array_index] <- matched_location             array_index <- array_index + 1         }, error = function(error_condition) {             print("Error")             postcode_array[array_index] <- "error"             array_index <- array_index + 1         }, warning = function(warning_condition) {             print("Warning")             postcode_array[array_index] <- "error"             array_index <- array_index + 1         })         count_try <- count_try + 1     } }
postcode_array
length(post)
length(postcode_array)
all_locations <- AllNICrimeData$Location postcode_array <- c() array_index <- 1 count_try <- 0 for (location in all_locations) {     if (count_try > 1) {         break;     }     matched_location <- find_a_postcode(location)     if (!is.integer(matched_location)) {         print(matched_location)         print(typeof(matched_location))         tryCatch({             postcode_array[array_index] <- matched_location             array_index <- array_index + 1         }, error = function(error_condition) {             print("Error")             postcode_array[array_index] <- NA             array_index <- array_index + 1         }, warning = function(warning_condition) {             print("Warning")             postcode_array[array_index] <- "error"             array_index <- array_index + 1         })         count_try <- count_try + 1     } }
postcode_array
postcode_array
typeof(match)
typeof(matched_location)
find_a_postcode <- function(location) {     if (is.na(location)) {         print("Location was NULL")         return;     }     lr <- tolower(location)     lr <- trimws(lr)     primary_thorfare <- CleanNIPostcodeData$Primary_Thorfare     matched_index <- 0;     count <- 1     for (pt in primary_thorfare) {         if (!is.na(pt)) {             pt_lr <- tolower(pt)             pt_lr <- trimws(pt_lr)             if (lr == pt_lr) {                 matched_index <- count                 break;             }         }         count <- count + 1     }     post_code <- CleanNIPostcodeData$Postcode[matched_index]     typeof(post_code)     return(post_code) }
all_locations <- AllNICrimeData$Location postcode_array <- c() array_index <- 1 count_try <- 0 for (location in all_locations) {     if (count_try > 1) {         break;     }     matched_location <- find_a_postcode(location)     if (!is.integer(matched_location)) {         print(matched_location)         print(typeof(matched_location))         tryCatch({             postcode_array[array_index] <- matched_location             array_index <- array_index + 1         }, error = function(error_condition) {             print("Error")             postcode_array[array_index] <- NA             array_index <- array_index + 1         }, warning = function(warning_condition) {             print("Warning")             postcode_array[array_index] <- "error"             array_index <- array_index + 1         })         count_try <- count_try + 1     } }
setwd('C:\\Users\\pvashisth\\Source\\Repos\\DataScience\\CA3\\Data')
getwd("/Data")
getwd('/Data')
getwd()
setwd('C:\\Users\\pvashisth\\Source\\Repos\\DataScience\\CA3\\Data')
find_a_postcode <- function(location) {     if (is.na(location)) {         print("Location was NULL")         return;     }     lr <- tolower(location)     lr <- trimws(lr)     primary_thorfare <- CleanNIPostcodeData$Primary_Thorfare     matched_index <- 0;     count <- 1     for (pt in primary_thorfare) {         if (!is.na(pt)) {             pt_lr <- tolower(pt)             pt_lr <- trimws(pt_lr)             if (lr == pt_lr) {                 matched_index <- count                 break;             }         }         count <- count + 1     }     post_code <- CleanNIPostcodeData$Postcode[matched_index]     print("Post Code")     print(post_code)     print("Post code type")     print(typeof(post_code))     return(post_code) }
all_locations <- AllNICrimeData$Location postcode_array <- c() array_index <- 1 count_try <- 0 for (location in all_locations) {     if (count_try > 1) {         break;     }     matched_location <- find_a_postcode(location)     if (!is.integer(matched_location)) {         print(matched_location)         print(typeof(matched_location))         tryCatch({             postcode_array[array_index] <- matched_location             array_index <- array_index + 1         }, error = function(error_condition) {             print("Error")             postcode_array[array_index] <- NA             array_index <- array_index + 1         }, warning = function(warning_condition) {             print("Warning")             postcode_array[array_index] <- "error"             array_index <- array_index + 1         })         count_try <- count_try + 1     } }
postcode_array
pcarray <- c() i <- 0 find_a_postcode <- function(location) {     if (is.na(location)) {         print("Location was NULL")         return;     }     lr <- tolower(location)     lr <- trimws(lr)     primary_thorfare <- CleanNIPostcodeData$Primary_Thorfare     matched_index <- 0;     count <- 1     for (pt in primary_thorfare) {         if (!is.na(pt)) {             pt_lr <- tolower(pt)             pt_lr <- trimws(pt_lr)             if (lr == pt_lr) {                 matched_index <- count                 break;             }         }         count <- count + 1     }     post_code <- CleanNIPostcodeData$Postcode[matched_index]     pcarray[i] <- post_code     i <- i + 1     print("Post Code")     print(post_code)     print("Post code type")     print(typeof(post_code))     return(post_code) }
all_locations <- AllNICrimeData$Location postcode_array <- c() array_index <- 1 count_try <- 0 for (location in all_locations) {     if (count_try > 1) {         break;     }     matched_location <- find_a_postcode(location)     if (!is.integer(matched_location)) {         print(matched_location)         print(typeof(matched_location))         tryCatch({             postcode_array[array_index] <- matched_location             array_index <- array_index + 1         }, error = function(error_condition) {             print("Error")             postcode_array[array_index] <- NA             array_index <- array_index + 1         }, warning = function(warning_condition) {             print("Warning")             postcode_array[array_index] <- "error"             array_index <- array_index + 1         })         count_try <- count_try + 1     } }
pc
pcarray
pcarray
